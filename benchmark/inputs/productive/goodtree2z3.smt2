(set-logic HORN)
(declare-datatypes ((List 0)) (((insert (head Int) (tail List)) (nil))))
(declare-fun Length (List Int) Bool)
(assert (forall ((ls List)) (=> (= ls nil) (Length ls 0))))
(assert (forall ((n Int)(hd Int)(tl List)) (=> (Length tl n) (Length (insert hd tl) (+ 1 n)))))
(declare-fun X1 (Int List) Bool)
(declare-fun X2 (Int List) Bool)
(declare-fun X3 (Int List) Bool)
(declare-fun X6 (Int Int List) Bool)
(declare-fun X7 (Int Int List List) Bool)
(declare-fun X16 (Int Int Int List List) Bool)
(declare-fun X17 (Int Int Int List List List) Bool)
(declare-fun X56 (Int ) Bool)
(declare-fun X59 ( ) Bool)
(declare-fun X60 ( List) Bool)
(declare-fun X67 (Int List) Bool)
(declare-fun X68 (Int Int Int List List) Bool)
(declare-fun X69 (Int Int Int Int List List List) Bool)
(declare-fun X70 (Int Int Int Int List List List) Bool)
(assert (forall ((x52 Int)(x50 List)) (=> (and (X2  x52  x50) (<=  x52 0)) false)))
(assert (forall ((hd8 Int)(x52 Int)(x50 List)) (=> (X2  x52  x50) (X6  hd8 x52  x50))))
(assert (forall ((u22 Int)(x51 Int)(x50 List)) (=> (and (X2  u22  x50) (X3  x51  x50)) (X1  x51  x50))))
(assert (forall ((hd8 Int)(u7 Int)(ls5 List)(tl9 List)) (=> (X6  hd8 u7  ls5) (X7  hd8 u7  tl9 ls5))))
(assert (forall ((hd8 Int)(tmp53 Int)(u7 Int)(ls5 List)(tl9 List)) (=> (and (=  tmp53 0) (and (X7  hd8 u7  tl9 ls5) (=  ls5 nil))) (X3  tmp53  ls5))))
(assert (forall ((hd8 Int)(tmp54 Int)(u7 Int)(ls5 List)(tl9 List)) (=> (and (=  tmp54 (-  u7 1)) (and (X7  hd8 u7  tl9 ls5) (and (=  hd8 0) (=  ls5 (insert hd8 tl9))))) (X68  tmp54 hd8 u7  tl9 ls5))))
(assert (forall ((hd8 Int)(hd210 Int)(u7 Int)(ls5 List)(tl9 List)) (=> (and (X7  hd8 u7  tl9 ls5) (and (=  hd8 1) (=  ls5 (insert hd8 tl9)))) (X16  hd210 hd8 u7  tl9 ls5))))
(assert (forall ((hd8 Int)(hd210 Int)(u7 Int)(ls5 List)(tl9 List)(tl211 List)) (=> (X16  hd210 hd8 u7  tl9 ls5) (X17  hd210 hd8 u7  tl211 tl9 ls5))))
(assert (forall ((hd8 Int)(hd210 Int)(tmp55 Int)(u7 Int)(ls5 List)(tl9 List)(tl211 List)) (=> (and (=  tmp55 1) (and (X17  hd210 hd8 u7  tl211 tl9 ls5) (=  tl9 nil))) (X3  tmp55  ls5))))
(assert (forall ((hd8 Int)(hd210 Int)(tmp56 Int)(u7 Int)(ls5 List)(tl9 List)(tl211 List)) (=> (and (=  tmp56 (-  u7 1)) (and (X17  hd210 hd8 u7  tl211 tl9 ls5) (and (=  hd210 0) (=  tl9 (insert hd210 tl211))))) (X69  tmp56 hd210 hd8 u7  tl211 tl9 ls5))))
(assert (forall ((hd8 Int)(hd210 Int)(tmp57 Int)(u7 Int)(ls5 List)(tl9 List)(tl211 List)) (=> (and (=  tmp57 (-  u7 1)) (and (X17  hd210 hd8 u7  tl211 tl9 ls5) (and (=  hd210 1) (=  tl9 (insert hd210 tl211))))) (X70  tmp57 hd210 hd8 u7  tl211 tl9 ls5))))
(assert (forall ((hd8 Int)(hd210 Int)(u7 Int)(x49 Int)(ls5 List)(tl9 List)(tl211 List)) (=> (X70  x49 hd210 hd8 u7  tl211 tl9 ls5) (X2  x49  tl211))))
(assert (forall ((hd8 Int)(hd210 Int)(u7 Int)(u22 Int)(x48 Int)(ls5 List)(tl9 List)(tl211 List)) (=> (and (X70  u22 hd210 hd8 u7  tl211 tl9 ls5) (X1  x48  tl211)) (X56  x48 ))))
(assert (forall ((hd8 Int)(hd210 Int)(u7 Int)(x47 Int)(ls5 List)(tl9 List)(tl211 List)) (=> (X69  x47 hd210 hd8 u7  tl211 tl9 ls5) (X2  x47  tl211))))
(assert (forall ((hd8 Int)(hd210 Int)(u7 Int)(u22 Int)(x46 Int)(ls5 List)(tl9 List)(tl211 List)) (=> (and (X69  u22 hd210 hd8 u7  tl211 tl9 ls5) (X1  x46  tl211)) (X56  x46 ))))
(assert (forall ((hd8 Int)(u7 Int)(x45 Int)(ls5 List)(tl9 List)) (=> (X68  x45 hd8 u7  tl9 ls5) (X2  x45  tl9))))
(assert (forall ((hd8 Int)(u7 Int)(u22 Int)(x44 Int)(ls5 List)(tl9 List)) (=> (and (X68  u22 hd8 u7  tl9 ls5) (X1  x44  tl9)) (X56  x44 ))))
(assert (forall ((ls3 List)) (=> X59 (X60   ls3))))
(assert (forall ((tmp58 Int)(ls3 List)) (=> (and (Length ls3 tmp58) (X60   ls3)) (X67  tmp58  ls3))))
(assert (forall ((x42 Int)(ls3 List)) (=> (X67  x42  ls3) (X2  x42  ls3))))
(assert (forall ((u22 Int)(x41 Int)(ls3 List)) (=> (and (X67  u22  ls3) (X1  x41  ls3)) (X56  x41 ))))
(assert X59)
(check-sat)