(set-logic HORN)
(declare-datatypes ((List 0)) (((insert (head Int) (tail List)) (nil))))
(declare-fun Length (List Int) Bool)
(assert (forall ((ls List)) (=> (= ls nil) (Length ls 0))))
(assert (forall ((n Int)(hd Int)(tl List)) (=> (Length tl n) (Length (insert hd tl) (+ 1 n)))))
(declare-fun X1 (Int List) Bool)
(declare-fun X2 (Int List) Bool)
(declare-fun X3 (Int List) Bool)
(declare-fun X6 (Int Int List) Bool)
(declare-fun X7 (Int Int List List) Bool)
(declare-fun X24 (Int ) Bool)
(declare-fun X27 ( ) Bool)
(declare-fun X28 ( List) Bool)
(declare-fun X35 (Int List) Bool)
(declare-fun X36 (Int Int Int List List) Bool)
(assert (forall ((x35 Int)(x33 List)) (=> (and (X2  x35  x33) (<=  x35 0)) false)))
(assert (forall ((hd8 Int)(x35 Int)(x33 List)) (=> (X2  x35  x33) (X6  hd8 x35  x33))))
(assert (forall ((u20 Int)(x34 Int)(x33 List)) (=> (and (X2  u20  x33) (X3  x34  x33)) (X1  x34  x33))))
(assert (forall ((hd8 Int)(u7 Int)(ls5 List)(tl9 List)) (=> (X6  hd8 u7  ls5) (X7  hd8 u7  tl9 ls5))))
(assert (forall ((hd8 Int)(tmp36 Int)(u7 Int)(ls5 List)(tl9 List)) (=> (and (=  tmp36 0) (and (X7  hd8 u7  tl9 ls5) (=  ls5 nil))) (X3  tmp36  ls5))))
(assert (forall ((hd8 Int)(tmp37 Int)(u7 Int)(ls5 List)(tl9 List)) (=> (and (=  tmp37 (-  u7 1)) (and (X7  hd8 u7  tl9 ls5) (and (=  hd8 0) (=  ls5 (insert hd8 tl9))))) (X36  tmp37 hd8 u7  tl9 ls5))))
(assert (forall ((hd8 Int)(u7 Int)(x32 Int)(ls5 List)(tl9 List)) (=> (X36  x32 hd8 u7  tl9 ls5) (X2  x32  tl9))))
(assert (forall ((hd8 Int)(u7 Int)(u20 Int)(x31 Int)(ls5 List)(tl9 List)) (=> (and (X36  u20 hd8 u7  tl9 ls5) (X1  x31  tl9)) (X24  x31 ))))
(assert (forall ((ls3 List)) (=> X27 (X28   ls3))))
(assert (forall ((tmp38 Int)(ls3 List)) (=> (and (Length ls3 tmp38) (X28   ls3)) (X35  (+ 1 tmp38)  ls3))))
(assert (forall ((x29 Int)(ls3 List)) (=> (X35  x29  ls3) (X2  x29  ls3))))
(assert (forall ((u20 Int)(x28 Int)(ls3 List)) (=> (and (X35  u20  ls3) (X1  x28  ls3)) (X24  x28 ))))
(assert X27)
(check-sat)